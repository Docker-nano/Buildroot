#!/bin/bash

version=1.0.0

cd "$(dirname "$0")"

. "$PWD"/settings

shopt -s extglob

help() {
	cat <<-nano
		·▄▄▄▄        ▄▄· ▄ •▄ ▄▄▄ .▄▄▄      ▐ ▄
		██▪ ██ ▪    ▐█ ▀▪█▌▄▌▪▀▄.▀·█  █·  ▪ █▌▐█ ▄▄▄· •█▄ ▌▪
		▐█  ▐█▌▄█▀▄ ██ ▄▄▐█▀▄·█▀▀▪▄▐▀▀▄    ▐█▐▐▌▐█ ▀█ ▐██▐█ ▄█▀▄
		██. ██▐█▌.▐▌▐███▌▐█.█▌▐█▄▄▌▐█•█▌   ██▐█▌▐█▀▀█▌██▐█▌▐█▌.▐▌
		▀▀▀▀▀• ▀█▄▀▪·▀▀▀ ·▀  ▀ ▀▀▀ .▀  ▀   ▀▀ █▪ ▀ ▪▀  ▀ ▀▪ ▀█▄▀•

		 Docker nano Buildroot container workflow helper v$version

		Usage: '$0' <$ops> [arg]...
	nano
}

build() {
	docker build -t "$NANO_IMAGE" .
}

run() {
	containerExists "$NANO_CONTAINER" && {
		read -rn1 -p'Remove previous container [Y/n]? ' remove
		echo
		[[ $remove = n ]] && { resume; return; }

		# Destroy any previous container because image might have been updated.
		echo -n Removing old container...
		docker stop "$NANO_CONTAINER" >&- 2>&-
		docker rm "$NANO_CONTAINER" >&- 2>&-
		echo ' done.'
	}

	echo "Starting '$NANO_CONTAINER' container..."
	docker run -it --name="$NANO_CONTAINER" "$NANO_IMAGE"
}

resume() {
	docker start "$NANO_CONTAINER" >&-

	if which docker-enter >/dev/null; then
		echo "Entering '$NANO_CONTAINER' container..."
		docker-enter "$NANO_CONTAINER"
	else
		echo "Resuming '$NANO_CONTAINER' container..."
		docker attach "$NANO_CONTAINER"
	fi
}

pull() {
	# Pull everything.
	(( $# == 0 )) && for op in config patches rootfs; do $FUNCNAME $op; done

	case $1 in
		conf?(ig))
			(
				dir=in; [ -d $dir ] || mkdir $dir && cd $dir &&
					docker cp "$NANO_CONTAINER":/root/buildroot/defconfig . &&
					mv defconfig buildroot.conf &&
					echo Copied $1 to $dir/$_.
			);;

		patch?(es))
			docker cp "$NANO_CONTAINER":/root/buildroot/patches in &&
				echo Copied patches to $_ directory.
			;;

		rootfs)
			docker cp "$NANO_CONTAINER":/root/buildroot/output/images/rootfs.tar.xz product &&
				echo Copied $1 to $_ directory.
			;;
	esac
}

containerExists() [[
	# Only containers have state.
	$(docker inspect -f {{.State}} "$1" 2>&-) = map\[*\]
]]

# Operations whitelist.
ops='help|build|run|resume|pull'

# If operation whitelisted...
if [[ $1 = @($ops) ]]; then
	# Execute operation.
	$1 "${@:2}"
else
	help >&2
	exit 1
fi
